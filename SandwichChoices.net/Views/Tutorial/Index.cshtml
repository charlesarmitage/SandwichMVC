@{
    ViewBag.Title = "Tutorial";
}

<h2>Tutorial</h2>

<div class="panel panel-default">
  <div class="panel-heading">
    <h2 class="panel-title">Building</h2>
  </div>
  <div class="panel-body">
    <p>
    You will need to download the following package for MVC4 development:
    <a href="http://www.microsoft.com/en-gb/download/details.aspx?id=30683">http://www.microsoft.com/en-gb/download/details.aspx?id=30683</a>
    http://www.microsoft.com/en-gb/download/details.aspx?id=30683
    </p>
    <p>
    You may need to upgrade your nu-get package manager. Then you may need to restore the missing nuget packages using the nuget package manager console.
    </p>
    <p>Build and hit F5.</p>
    <p>Navigate to localhost:(some port)/Knockout.</p>
  </div>
</div>
<div class="panel panel-default">
    <div class="panel-heading">
        <h2 class="panel-title">Model View View-Model (MVVM)</h2>
    </div>
    <div class="panel-body">
    <div class="row">
    <div class="col-md-6">
        <img src="/Content/images/mvvm.png" alt="Model View View-Model" class="img-rounded"/>
    </div>
    <div class="col-md-6">
        <p>Model View View-Model seperates the view from the model using a view-model. The view-model provides an observable data source that the view can be
        bound to. Observable means that if the data in the view-model changes then the view will be informed of the changes and can update. Likewise if the 
        view allows for the user to enter new data then that is reflected in the view-model via the data bindings.</p>
        <p>
        The view-model can interact with the underlying model to get or persist data from the view model.
        </p>
        <p>The view-model becomes a UI implementation independent version of the view.</p>
        </div>
        </div>
    </div>
</div>
<div class="panel panel-default">
  <div class="panel-heading">
    <h2 class="panel-title">Knockout data binding for MVVM</h2>
  </div>
  <div class="panel-body">
    <p>
    The Model (the data from the database) is returned from http://localhost:50574/api/sandwich/ (Try the api and see what is returned).
    The data is retrieved when the document/page is loaded.
    See function:
    <div class="well well-sm">
        $(document).ready(function () {</br>
        ...</br>
        }</br>
    </div>
    <p>
    The JSON data is then put into a Knockout observableArray. The array is declared in: 
    </p>
    <div class="well well-sm">
        var ViewModel = {</br>
        ...</br>
        sandwiches: ko.observableArray(),</br>
        }</br>
    </div>
    <p>and added to Knockout using:</p>
    <div class="well well-sm">
        ko.applyBindings(ViewModel);
    </div>
    <p>Finally, the View is bound to the data with the data-binding statements in the HTML. The observableArray is iterated over in the table
    using the following statements:</p>
    <div class="well well-sm">
    &lt;tbody data-bind="foreach: sandwiches"&gt;</br>
        &lt;tr&gt;</br>
            &lt;td data-bind="text: Name">&lt;/td&gt;</br>
            &lt;td data-bind="text: FlavourRating"&gt;&lt;/td&gt;</br>
            &lt;td data-bind="text: Ingredients"&gt;&lt;/td&gt;</br>
            &lt;td data-bind="text: Priority"&gt;&lt;/td&gt;</br>
        &lt;/tr&gt;</br>
    &lt;/tbody&gt;</br>
    </div>
    <p>Note how the foreach binding is bound to the "sandwiches" label (the observableArray) and the table cell elements are bound to 
    elements of the model (a sandwich).</p>
  </div>
</div>
<div class="panel panel-default">
  <div class="panel-heading">
    <h2 class="panel-title">Excercises</h2>
  </div>
  <div class="panel-body">
        <p>The excercises require the Knockout/Index.cshtml file to be edited. This can be done while the application is running (in a debugger or otherwise).
            Just refresh the page.</p>
        <p>Detailed Knockout docs and tutorials are available at: <a href="http://knockoutjs.com/">http://knockoutjs.com/</a></p>
    <ol class="list-group">
        <li class="list-group-item">"InventedBy" is missing from the summary table populated when the page loads. Add it.</li>
        <li class="list-group-item">The pick sandwich choice button (at the top of the page) is bound to the view-model on the click event.
        See <b>data-bind="click: pickFirstSandwichChoice"</b>. This calls the pickFirstSandwichChoice function in the View-Model. The pickSandwichChoice
        function in the View-Model just returns the first choice in the model's array. 
        <p>Add another function to pick a random selection or other whimsical way of choosing a sandwich. Bind this new function to the click event.</p></li>
        <li class="list-group-item">Try entering data into the Add Choice panel. Note how the Preview Name is automatically updated in the page.</li>
        <li class="list-group-item">
            The Add Choice panel "Ingredients" input field is not bound to any part of the ViewModel. Add an observable to the ViewModel and bind it to the "Ingredients" input field. The Preview Ingredients field is not bound to the model. Bind it to get the changes in the Add Choice panel to be reflected
            in the Preview panel.
            <p>What is the difference if the "valueUpdate: 'afterkeydown'" option is not added to the data binding.</p>
        </li>
        <li class="list-group-item">
            The Add Choice panel does not have all of the different fields for adding a new sandwich choice to the database. Add the new fields.
        </li>        
        <li class="list-group-item">
            The Add button is not bound to any function that will add the sandwich choice to the database. Add a function to add the choice to the database.
            The observableArray will then need to be updated to reflect the new model data.
            <p>Perhaps add a fake delay and a progress bar to simulate performing a long calculation on the data.</p>
        </li>
        <li class="list-group-item">
            Add "Details", "Edit" and "Delete" functionality. Perhaps using buttons added to the table?
        </li>
        <li class="list-group-item">
            Use Bootstrap to make the interface more appealing. Add more glyphs and better panels etc. Change what parts of the page are visible. Knockout allows you to bind part of the ViewModel to the "visible" HTML attribute.
        </li>
        <li class="list-group-item">
            <b>Contribute! Clone <a href="https://github.com/charlesarmitage/SandwichMVC/">https://github.com/charlesarmitage/SandwichMVC/</a> push your changes and send me a pull request.</b>
        </li>
    </ol>
  </div>
</div>
